[include client_variables.cfg]

[gcode_macro SAFE_SHUTDOWN_MACHINE]
gcode:
#  {% set safe_extruder_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|default(50)|int %}
#  {% if printer.idle_timeout.state == "Printing" %}
#    RESPOND TYPE=error MSG="Shutdown: Print in progress"
#    _DISPLAY_AND_CLEAR MSG="!! PRINTING"
#  {% elif printer.extruder.temperature > safe_extruder_temp %}
#    RESPOND TYPE=error MSG="Shutdown: Extruder temp > {safe_extruder_temp}"
#    _DISPLAY_AND_CLEAR MSG="!! EXTRUDER TEMP"
#  {% else %}
    RESPOND MSG="Shutting down"
    SET_DISPLAY_TEXT MSG="Shutting down"
    TURN_OFF_HEATERS
    M107 # Turn off FAN
    M84 # Disable steppers
    {action_call_remote_method("shutdown_machine")}
 #{% endif %}

[gcode_macro PRINT_START]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  CLEAR_PAUSE
  #SAVE_GCODE_STATE NAME=STATE_PRINT_START
  # Turn on the lights
  SET_CASELIGHT_ON
  STATUS_BUSY
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # start with the print fan off
  M107
  # Pre-heat (also homes)
  SET_DISPLAY_TEXT MSG="Home and Pre-heat"
  STATUS_HEATING
  PREHEAT EXTRUDER_TEMP=180 BED_TEMP={BED_TEMP} CHAMBER_TEMP={CHAMBER_TEMP}
  # Z-tilt
  SET_DISPLAY_TEXT MSG="Leveling"
  STATUS_LEVELING
  Z_TILT_ADJUST
  G28 Z
  SET_DISPLAY_TEXT MSG="Clean nozzle"
  STATUS_CLEANING
  CLEAN_NOZZLE
  G28 Z
  # Mesh
  SET_DISPLAY_TEXT MSG="Bed mesh"
  STATUS_MESHING
  BED_MESH_CALIBRATE ADAPTIVE=1
  BED_MESH_OUTPUT
  # Park near print area
  SMART_PARK
  # Finish heating extruder
  SET_DISPLAY_TEXT MSG="Final heating"
  STATUS_HEATING
  M109 S{EXTRUDER_TEMP}
  RESPOND MSG="Purging"
  SET_DISPLAY_TEXT MSG="Purging"
  STATUS_CLEANING
  LINE_PURGE
  RESPOND MSG="Printing"
  SET_DISPLAY_TEXT MSG="Printing"
  STATUS_PRINTING
  SET_NOZZLE_LEDS_ON
  #RESTORE_GCODE_STATE NAME=STATE_PRINT_START
  G92 E0

[gcode_macro PARK_REAR]
description: Parks the nozzle in the right rear
gcode:
  {% set th = printer.toolhead %}
  G90
  G0 X{th.axis_maximum.x - 2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
  
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set retract = client.end_retract|default(5.0)|abs %}
  {% set speed_retract = client.speed_retract|default(35.0)|abs %}
  {% set speed = client.end_speed_retract|default(speed_retract) %}

  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 25, th.axis_maximum.z]|min %}
    
  #SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
  M400                           ; wait for buffer to clear
  G92 E0                         ; zero the extruder
  RESPOND MSG="Retract {retract} at {speed} mm/s at end of print"
  _CLIENT_RETRACT LENGTH={retract} SPEED={speed}

  TURN_OFF_HEATERS

  SET_NOZZLE_LEDS_OFF
  
  G90                                      ; absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
  M107                                     ; turn off fan
  
  BED_MESH_CLEAR
  STATUS_READY
  #RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.end_retract|default(5.0)|abs %}
  {% set speed_retract = client.speed_retract|default(35.0)|abs %}
  {% set speed = client.end_speed_retract|default(speed_retract) %}

  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  RESPOND MSG="Retract {retract} at {speed} mm/s at end of print"
  _CLIENT_RETRACT LENGTH={retract} SPEED={speed}
  SET_NOZZLE_LEDS_OFF
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  STATUS_READY
  CANCEL_PRINT_BASE


[gcode_macro SET_CASELIGHT_ON]
description: Turn on the case lights (top-mounted lights in the printer enclosure)
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set brightness = client.caselight_brightness|default(1.0)|float %}
  SET_PIN PIN=caselight VALUE={brightness}

[gcode_macro _TOGGLE_CASELIGHT]
description: Toggle the case lights on or off
gcode:
  {% if printer["output_pin caselight"].value == 0 %}
    SET_CASELIGHT_ON
  {% else %}
    SET_CASELIGHT_OFF
  {% endif %}

[gcode_macro SET_CASELIGHT_OFF]
description: Turn off the case lights (top-mounted lights in the printer enclosure)
gcode:
  SET_PIN PIN=caselight VALUE=0.0

[gcode_macro SET_ALL_LIGHTS_ON]
description: Turn on all lights
gcode:
  SET_CASELIGHT_ON
  SET_NOZZLE_LEDS_ON
  SET_NOZZLE_LEDS_ON
  
[gcode_macro SET_ALL_LIGHTS_OFF]
description: Turn off all lights
gcode:
  SET_CASELIGHT_OFF
  SET_NOZZLE_LEDS_OFF
  SET_LOGO_LEDS_OFF
  
[gcode_macro CENTER_X]
description: Move to the X center of the bed
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set x_axis_maximum = printer.toolhead.axis_maximum.x %}
  {% set bed_dx = client.bed_dx|default(x_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  SAVE_GCODE_STATE NAME=STATE_CENTER_X
  G0
  G1 X{bed_dx/2} F{travel_speed}
  RESTORE_GCODE_STATE NAME=STATE_CENTER_X

[gcode_macro CENTER_Y]
description: Move to the Y center of the bed
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set y_axis_maximum = printer.toolhead.axis_maximum.y %}
  {% set bed_dy = client.bed_dy|default(y_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  SAVE_GCODE_STATE NAME=STATE_CENTER_Y
  G0
  G1 Y{bed_dy/2} F{travel_speed}
  RESTORE_GCODE_STATE NAME=STATE_CENTER_Y

[gcode_macro CENTER_XY]
description: Move to the center of the bed
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set y_axis_maximum = printer.toolhead.axis_maximum.y %}
  {% set bed_dy = client.bed_dy|default(y_axis_maximum) %}
  {% set x_axis_maximum = printer.toolhead.axis_maximum.x %}
  {% set bed_dx = client.bed_dx|default(x_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  SAVE_GCODE_STATE NAME=STATE_CENTER_XY
  G0
  G1 X{bed_dx/2} Y{bed_dy/2} F{travel_speed}
  RESTORE_GCODE_STATE NAME=STATE_CENTER_XY

[gcode_macro Z_50]
description: Move the Z axis to 50mm
gcode:
  SAVE_GCODE_STATE NAME=STATE_Z_50
  G0
  G1 Z{50}
  RESTORE_GCODE_STATE NAME=STATE_Z_50

[gcode_macro PARK_FOR_LOAD]
description: Move to the toolhead to a convenient position to load or unload filament
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set x_axis_maximum = printer.toolhead.axis_maximum.x %}
  {% set bed_dx = client.bed_dx|default(x_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  {% set x = client.load_park_x|default(bed_dx/2)|float %}
  {% set y = client.load_park_y|default(0)|float %}
  {% set z = client.load_park_z|default(50)|float %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    SET_DISPLAY_TEXT MSG="Homing"
    G28
  {% endif %}
  SAVE_GCODE_STATE NAME=STATE_PARK_FOR_LOAD
  G0
  G1 X{x} Y{y} Z{z} F{travel_speed}
  RESTORE_GCODE_STATE NAME=STATE_PARK_FOR_LOAD

[gcode_macro _IDLE_TIMEOUT]
description: Executed when printer idle timeout is reached
gcode:
  RESPOND MSG="Idle timeout"
  TURN_OFF_HEATERS
  M84
  M107
  TURN_OFF_HEATERS
  SET_ALL_LIGHTS_OFF
  status_standby_skirt

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}
  
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_macro PREHEAT]
description: Pre-heat the print chamber
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLES']|default({}) %}
  {% set x_axis_maximum = printer.toolhead.axis_maximum.x %}
  {% set bed_dx = client.bed_dx|default(x_axis_maximum) %}
  {% set y_axis_maximum = printer.toolhead.axis_maximum.y %}
  {% set bed_dy = client.bed_dy|default(y_axis_maximum) %}
  {% set park_x = client.preheat_park_x|default(bed_dx/2.0)|float %}
  {% set park_y = client.preheat_park_y|default(bed_dy/2.0)|float %}
  {% set park_z = client.preheat_park_z|default(20.0)|float %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  {% set fan = client.preheat_fan|default(0)|float %}

  {% if "xyz" not in printer.toolhead.homed_axes %}
    SET_DISPLAY_TEXT MSG="Homing"
    G28
  {% endif %}

  SAVE_GCODE_STATE NAME=STATE_PREHEAT
  G0
  G1 X{park_x} Y{park_y} Z{park_z} F{travel_speed}

  SET_DISPLAY_TEXT MSG="Pre-heat"
  M104 S{EXTRUDER_TEMP}
  M190 S{BED_TEMP}

  M106 S{fan}
  
  SAVE_GCODE_STATE NAME=STATE_PREHEAT

[gcode_macro DUMP_PRINTER_STATE]
gcode:
  {% set filter = params.FILTER|default('')|string %}
  {% set exclude_vars = ['bed_mesh'] %}
  {% set ns = namespace(output = '') %}
  {% for outer_var in printer %}
    {% if filter == '' or outer_var == filter %}
      {% for inner_var in printer[outer_var] %}
        {% if inner_var is not in exclude_vars %}
          {% set line = "printer.%s.%s: %s\n" % (outer_var, inner_var, printer[outer_var][inner_var]) %}
          {% set ns.output = ns.output ~ line %}
        {% endif %}
      {% endfor %}  
    {% endif %}
  {% endfor %}  
  {action_respond_info(ns.output)}
  
[gcode_macro CLEAN_NOZZLE]
description: Runs nozzle over nozzle brush to clean filament off the nozzle

variable_x_range: [205, 248]
variable_y_steps: [303.5, 304.0, 304.5, 305.0, 305.5, 306]
variable_z: 3.0
variable_wipe_count: 2
variable_wipe_speed: 200
variable_raise_distance: 10

gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=_STATE_CLEAN_NOZZLE
    G90 ; absolute positioning

    ## Move nozzle to start position
    G1 X{x_range[0]} Y{y_steps[0]} F6000
    G1 Z{z} F1500

    {% for y in y_steps %}
      G1 Y{y} F{wipe_speed * 60}
      {% for wipe in range(wipe_count) %}
        G1 X{x_range[1]} F{wipe_speed * 60}
        G1 X{x_range[0]} F{wipe_speed * 60}
      {% endfor %}
    {% endfor %}
      
    ## Raise nozzle
    G91
    G1 Z{raise_distance}

    RESTORE_GCODE_STATE NAME=_STATE_CLEAN_NOZZLE
  {% else %}  
      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!
  {% endif %}
 
